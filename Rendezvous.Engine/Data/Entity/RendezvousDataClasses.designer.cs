#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rendezvous.Engine.Data.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Rendezvous")]
	public partial class RendezvousDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPartner(Partner instance);
    partial void UpdatePartner(Partner instance);
    partial void DeletePartner(Partner instance);
    partial void InsertTestimonial(Testimonial instance);
    partial void UpdateTestimonial(Testimonial instance);
    partial void DeleteTestimonial(Testimonial instance);
    partial void InsertPartnerType(PartnerType instance);
    partial void UpdatePartnerType(PartnerType instance);
    partial void DeletePartnerType(PartnerType instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectPartner(ProjectPartner instance);
    partial void UpdateProjectPartner(ProjectPartner instance);
    partial void DeleteProjectPartner(ProjectPartner instance);
    partial void InsertProjectImage(ProjectImage instance);
    partial void UpdateProjectImage(ProjectImage instance);
    partial void DeleteProjectImage(ProjectImage instance);
    partial void InsertProjectType(ProjectType instance);
    partial void UpdateProjectType(ProjectType instance);
    partial void DeleteProjectType(ProjectType instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertSiteError(SiteError instance);
    partial void UpdateSiteError(SiteError instance);
    partial void DeleteSiteError(SiteError instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRolePermission(RolePermission instance);
    partial void UpdateRolePermission(RolePermission instance);
    partial void DeleteRolePermission(RolePermission instance);
    partial void InsertPasswordResetRequest(PasswordResetRequest instance);
    partial void UpdatePasswordResetRequest(PasswordResetRequest instance);
    partial void DeletePasswordResetRequest(PasswordResetRequest instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public RendezvousDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RendezvousDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RendezvousDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RendezvousDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Partner> Partners
		{
			get
			{
				return this.GetTable<Partner>();
			}
		}
		
		public System.Data.Linq.Table<Testimonial> Testimonials
		{
			get
			{
				return this.GetTable<Testimonial>();
			}
		}
		
		public System.Data.Linq.Table<PartnerType> PartnerTypes
		{
			get
			{
				return this.GetTable<PartnerType>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectPartner> ProjectPartners
		{
			get
			{
				return this.GetTable<ProjectPartner>();
			}
		}
		
		public System.Data.Linq.Table<ProjectImage> ProjectImages
		{
			get
			{
				return this.GetTable<ProjectImage>();
			}
		}
		
		public System.Data.Linq.Table<ProjectType> ProjectTypes
		{
			get
			{
				return this.GetTable<ProjectType>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<SiteError> SiteErrors
		{
			get
			{
				return this.GetTable<SiteError>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RolePermission> RolePermissions
		{
			get
			{
				return this.GetTable<RolePermission>();
			}
		}
		
		public System.Data.Linq.Table<PasswordResetRequest> PasswordResetRequests
		{
			get
			{
				return this.GetTable<PasswordResetRequest>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Partner")]
	public partial class Partner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PartnerKey;
		
		private int _PartnerTypeKey;
		
		private string _Name;
		
		private string _Description;
		
		private string _WebsiteURL;
		
		private EntitySet<ProjectPartner> _ProjectPartners;
		
		private EntityRef<PartnerType> _PartnerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartnerKeyChanging(int value);
    partial void OnPartnerKeyChanged();
    partial void OnPartnerTypeKeyChanging(int value);
    partial void OnPartnerTypeKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWebsiteURLChanging(string value);
    partial void OnWebsiteURLChanged();
    #endregion
		
		public Partner()
		{
			this._ProjectPartners = new EntitySet<ProjectPartner>(new Action<ProjectPartner>(this.attach_ProjectPartners), new Action<ProjectPartner>(this.detach_ProjectPartners));
			this._PartnerType = default(EntityRef<PartnerType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PartnerKey
		{
			get
			{
				return this._PartnerKey;
			}
			set
			{
				if ((this._PartnerKey != value))
				{
					this.OnPartnerKeyChanging(value);
					this.SendPropertyChanging();
					this._PartnerKey = value;
					this.SendPropertyChanged("PartnerKey");
					this.OnPartnerKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerTypeKey", DbType="Int NOT NULL")]
		public int PartnerTypeKey
		{
			get
			{
				return this._PartnerTypeKey;
			}
			set
			{
				if ((this._PartnerTypeKey != value))
				{
					if (this._PartnerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerTypeKeyChanging(value);
					this.SendPropertyChanging();
					this._PartnerTypeKey = value;
					this.SendPropertyChanged("PartnerTypeKey");
					this.OnPartnerTypeKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteURL", DbType="VarChar(100)")]
		public string WebsiteURL
		{
			get
			{
				return this._WebsiteURL;
			}
			set
			{
				if ((this._WebsiteURL != value))
				{
					this.OnWebsiteURLChanging(value);
					this.SendPropertyChanging();
					this._WebsiteURL = value;
					this.SendPropertyChanged("WebsiteURL");
					this.OnWebsiteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Partner_ProjectPartner", Storage="_ProjectPartners", ThisKey="PartnerKey", OtherKey="PartnerKey")]
		public EntitySet<ProjectPartner> ProjectPartners
		{
			get
			{
				return this._ProjectPartners;
			}
			set
			{
				this._ProjectPartners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartnerType_Partner", Storage="_PartnerType", ThisKey="PartnerTypeKey", OtherKey="PartnerTypeKey", IsForeignKey=true)]
		public PartnerType PartnerType
		{
			get
			{
				return this._PartnerType.Entity;
			}
			set
			{
				PartnerType previousValue = this._PartnerType.Entity;
				if (((previousValue != value) 
							|| (this._PartnerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartnerType.Entity = null;
						previousValue.Partners.Remove(this);
					}
					this._PartnerType.Entity = value;
					if ((value != null))
					{
						value.Partners.Add(this);
						this._PartnerTypeKey = value.PartnerTypeKey;
					}
					else
					{
						this._PartnerTypeKey = default(int);
					}
					this.SendPropertyChanged("PartnerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectPartners(ProjectPartner entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_ProjectPartners(ProjectPartner entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Testimonial")]
	public partial class Testimonial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestimonialKey;
		
		private System.DateTime _CreateDate;
		
		private string _Name;
		
		private string _Note;
		
		private System.Nullable<int> _ProjectKey;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestimonialKeyChanging(int value);
    partial void OnTestimonialKeyChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnProjectKeyChanging(System.Nullable<int> value);
    partial void OnProjectKeyChanged();
    #endregion
		
		public Testimonial()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestimonialKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestimonialKey
		{
			get
			{
				return this._TestimonialKey;
			}
			set
			{
				if ((this._TestimonialKey != value))
				{
					this.OnTestimonialKeyChanging(value);
					this.SendPropertyChanging();
					this._TestimonialKey = value;
					this.SendPropertyChanged("TestimonialKey");
					this.OnTestimonialKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectKey", DbType="Int")]
		public System.Nullable<int> ProjectKey
		{
			get
			{
				return this._ProjectKey;
			}
			set
			{
				if ((this._ProjectKey != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectKey = value;
					this.SendPropertyChanged("ProjectKey");
					this.OnProjectKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Testimonial", Storage="_Project", ThisKey="ProjectKey", OtherKey="ProjectKey", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Testimonials.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Testimonials.Add(this);
						this._ProjectKey = value.ProjectKey;
					}
					else
					{
						this._ProjectKey = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartnerType")]
	public partial class PartnerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PartnerTypeKey;
		
		private string _Title;
		
		private EntitySet<Partner> _Partners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartnerTypeKeyChanging(int value);
    partial void OnPartnerTypeKeyChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public PartnerType()
		{
			this._Partners = new EntitySet<Partner>(new Action<Partner>(this.attach_Partners), new Action<Partner>(this.detach_Partners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerTypeKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PartnerTypeKey
		{
			get
			{
				return this._PartnerTypeKey;
			}
			set
			{
				if ((this._PartnerTypeKey != value))
				{
					this.OnPartnerTypeKeyChanging(value);
					this.SendPropertyChanging();
					this._PartnerTypeKey = value;
					this.SendPropertyChanged("PartnerTypeKey");
					this.OnPartnerTypeKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartnerType_Partner", Storage="_Partners", ThisKey="PartnerTypeKey", OtherKey="PartnerTypeKey")]
		public EntitySet<Partner> Partners
		{
			get
			{
				return this._Partners;
			}
			set
			{
				this._Partners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Partners(Partner entity)
		{
			this.SendPropertyChanging();
			entity.PartnerType = this;
		}
		
		private void detach_Partners(Partner entity)
		{
			this.SendPropertyChanging();
			entity.PartnerType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectKey;
		
		private int _ProjectTypeKey;
		
		private bool _Active;
		
		private string _Title;
		
		private string _Description;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _CompletionDate;
		
		private EntitySet<Testimonial> _Testimonials;
		
		private EntitySet<ProjectPartner> _ProjectPartners;
		
		private EntitySet<ProjectImage> _ProjectImages;
		
		private EntityRef<ProjectType> _ProjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectKeyChanging(int value);
    partial void OnProjectKeyChanged();
    partial void OnProjectTypeKeyChanging(int value);
    partial void OnProjectTypeKeyChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnCompletionDateChanging(System.DateTime value);
    partial void OnCompletionDateChanged();
    #endregion
		
		public Project()
		{
			this._Testimonials = new EntitySet<Testimonial>(new Action<Testimonial>(this.attach_Testimonials), new Action<Testimonial>(this.detach_Testimonials));
			this._ProjectPartners = new EntitySet<ProjectPartner>(new Action<ProjectPartner>(this.attach_ProjectPartners), new Action<ProjectPartner>(this.detach_ProjectPartners));
			this._ProjectImages = new EntitySet<ProjectImage>(new Action<ProjectImage>(this.attach_ProjectImages), new Action<ProjectImage>(this.detach_ProjectImages));
			this._ProjectType = default(EntityRef<ProjectType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectKey
		{
			get
			{
				return this._ProjectKey;
			}
			set
			{
				if ((this._ProjectKey != value))
				{
					this.OnProjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectKey = value;
					this.SendPropertyChanged("ProjectKey");
					this.OnProjectKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTypeKey", DbType="Int NOT NULL")]
		public int ProjectTypeKey
		{
			get
			{
				return this._ProjectTypeKey;
			}
			set
			{
				if ((this._ProjectTypeKey != value))
				{
					if (this._ProjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectTypeKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectTypeKey = value;
					this.SendPropertyChanged("ProjectTypeKey");
					this.OnProjectTypeKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionDate", DbType="DateTime NOT NULL")]
		public System.DateTime CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this.OnCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._CompletionDate = value;
					this.SendPropertyChanged("CompletionDate");
					this.OnCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Testimonial", Storage="_Testimonials", ThisKey="ProjectKey", OtherKey="ProjectKey")]
		public EntitySet<Testimonial> Testimonials
		{
			get
			{
				return this._Testimonials;
			}
			set
			{
				this._Testimonials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectPartner", Storage="_ProjectPartners", ThisKey="ProjectKey", OtherKey="ProjectKey")]
		public EntitySet<ProjectPartner> ProjectPartners
		{
			get
			{
				return this._ProjectPartners;
			}
			set
			{
				this._ProjectPartners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectImage", Storage="_ProjectImages", ThisKey="ProjectKey", OtherKey="ProjectKey")]
		public EntitySet<ProjectImage> ProjectImages
		{
			get
			{
				return this._ProjectImages;
			}
			set
			{
				this._ProjectImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectType_Project", Storage="_ProjectType", ThisKey="ProjectTypeKey", OtherKey="ProjectTypeKey", IsForeignKey=true)]
		public ProjectType ProjectType
		{
			get
			{
				return this._ProjectType.Entity;
			}
			set
			{
				ProjectType previousValue = this._ProjectType.Entity;
				if (((previousValue != value) 
							|| (this._ProjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectType.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._ProjectType.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ProjectTypeKey = value.ProjectTypeKey;
					}
					else
					{
						this._ProjectTypeKey = default(int);
					}
					this.SendPropertyChanged("ProjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Testimonials(Testimonial entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Testimonials(Testimonial entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectPartners(ProjectPartner entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectPartners(ProjectPartner entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectImages(ProjectImage entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectImages(ProjectImage entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectPartner")]
	public partial class ProjectPartner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectPartnerKey;
		
		private int _ProjectKey;
		
		private int _PartnerKey;
		
		private EntityRef<Partner> _Partner;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectPartnerKeyChanging(int value);
    partial void OnProjectPartnerKeyChanged();
    partial void OnProjectKeyChanging(int value);
    partial void OnProjectKeyChanged();
    partial void OnPartnerKeyChanging(int value);
    partial void OnPartnerKeyChanged();
    #endregion
		
		public ProjectPartner()
		{
			this._Partner = default(EntityRef<Partner>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectPartnerKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectPartnerKey
		{
			get
			{
				return this._ProjectPartnerKey;
			}
			set
			{
				if ((this._ProjectPartnerKey != value))
				{
					this.OnProjectPartnerKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectPartnerKey = value;
					this.SendPropertyChanged("ProjectPartnerKey");
					this.OnProjectPartnerKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectKey", DbType="Int NOT NULL")]
		public int ProjectKey
		{
			get
			{
				return this._ProjectKey;
			}
			set
			{
				if ((this._ProjectKey != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectKey = value;
					this.SendPropertyChanged("ProjectKey");
					this.OnProjectKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartnerKey", DbType="Int NOT NULL")]
		public int PartnerKey
		{
			get
			{
				return this._PartnerKey;
			}
			set
			{
				if ((this._PartnerKey != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerKeyChanging(value);
					this.SendPropertyChanging();
					this._PartnerKey = value;
					this.SendPropertyChanged("PartnerKey");
					this.OnPartnerKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Partner_ProjectPartner", Storage="_Partner", ThisKey="PartnerKey", OtherKey="PartnerKey", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.ProjectPartners.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.ProjectPartners.Add(this);
						this._PartnerKey = value.PartnerKey;
					}
					else
					{
						this._PartnerKey = default(int);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectPartner", Storage="_Project", ThisKey="ProjectKey", OtherKey="ProjectKey", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectPartners.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectPartners.Add(this);
						this._ProjectKey = value.ProjectKey;
					}
					else
					{
						this._ProjectKey = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectImage")]
	public partial class ProjectImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectImageKey;
		
		private int _ProjectKey;
		
		private string _ImagePath;
		
		private System.Nullable<int> _SortOrder;
		
		private bool _DefaultImage;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectImageKeyChanging(int value);
    partial void OnProjectImageKeyChanged();
    partial void OnProjectKeyChanging(int value);
    partial void OnProjectKeyChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnSortOrderChanging(System.Nullable<int> value);
    partial void OnSortOrderChanged();
    partial void OnDefaultImageChanging(bool value);
    partial void OnDefaultImageChanged();
    #endregion
		
		public ProjectImage()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectImageKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectImageKey
		{
			get
			{
				return this._ProjectImageKey;
			}
			set
			{
				if ((this._ProjectImageKey != value))
				{
					this.OnProjectImageKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectImageKey = value;
					this.SendPropertyChanged("ProjectImageKey");
					this.OnProjectImageKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectKey", DbType="Int NOT NULL")]
		public int ProjectKey
		{
			get
			{
				return this._ProjectKey;
			}
			set
			{
				if ((this._ProjectKey != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectKey = value;
					this.SendPropertyChanged("ProjectKey");
					this.OnProjectKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int")]
		public System.Nullable<int> SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultImage", DbType="Bit NOT NULL")]
		public bool DefaultImage
		{
			get
			{
				return this._DefaultImage;
			}
			set
			{
				if ((this._DefaultImage != value))
				{
					this.OnDefaultImageChanging(value);
					this.SendPropertyChanging();
					this._DefaultImage = value;
					this.SendPropertyChanged("DefaultImage");
					this.OnDefaultImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectImage", Storage="_Project", ThisKey="ProjectKey", OtherKey="ProjectKey", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectImages.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectImages.Add(this);
						this._ProjectKey = value.ProjectKey;
					}
					else
					{
						this._ProjectKey = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectType")]
	public partial class ProjectType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectTypeKey;
		
		private string _ID;
		
		private string _Title;
		
		private string _Description;
		
		private string _ImageUrl;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectTypeKeyChanging(int value);
    partial void OnProjectTypeKeyChanged();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    #endregion
		
		public ProjectType()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTypeKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectTypeKey
		{
			get
			{
				return this._ProjectTypeKey;
			}
			set
			{
				if ((this._ProjectTypeKey != value))
				{
					this.OnProjectTypeKeyChanging(value);
					this.SendPropertyChanging();
					this._ProjectTypeKey = value;
					this.SendPropertyChanged("ProjectTypeKey");
					this.OnProjectTypeKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageUrl", DbType="VarChar(100)")]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectType_Project", Storage="_Projects", ThisKey="ProjectTypeKey", OtherKey="ProjectTypeKey")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectType = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoles")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private int _UserID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SiteErrors")]
	public partial class SiteError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorId;
		
		private System.DateTime _CreatedTS;
		
		private string _ExceptionType;
		
		private string _Message;
		
		private string _StackTrace;
		
		private string _URL;
		
		private string _LoggedInUserName;
		
		private string _AdditionalInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIdChanging(int value);
    partial void OnErrorIdChanged();
    partial void OnCreatedTSChanging(System.DateTime value);
    partial void OnCreatedTSChanged();
    partial void OnExceptionTypeChanging(string value);
    partial void OnExceptionTypeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnLoggedInUserNameChanging(string value);
    partial void OnLoggedInUserNameChanged();
    partial void OnAdditionalInfoChanging(string value);
    partial void OnAdditionalInfoChanged();
    #endregion
		
		public SiteError()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorId
		{
			get
			{
				return this._ErrorId;
			}
			set
			{
				if ((this._ErrorId != value))
				{
					this.OnErrorIdChanging(value);
					this.SendPropertyChanging();
					this._ErrorId = value;
					this.SendPropertyChanged("ErrorId");
					this.OnErrorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedTS", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedTS
		{
			get
			{
				return this._CreatedTS;
			}
			set
			{
				if ((this._CreatedTS != value))
				{
					this.OnCreatedTSChanging(value);
					this.SendPropertyChanging();
					this._CreatedTS = value;
					this.SendPropertyChanged("CreatedTS");
					this.OnCreatedTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExceptionType", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ExceptionType
		{
			get
			{
				return this._ExceptionType;
			}
			set
			{
				if ((this._ExceptionType != value))
				{
					this.OnExceptionTypeChanging(value);
					this.SendPropertyChanging();
					this._ExceptionType = value;
					this.SendPropertyChanged("ExceptionType");
					this.OnExceptionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggedInUserName", DbType="VarChar(100)")]
		public string LoggedInUserName
		{
			get
			{
				return this._LoggedInUserName;
			}
			set
			{
				if ((this._LoggedInUserName != value))
				{
					this.OnLoggedInUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoggedInUserName = value;
					this.SendPropertyChanged("LoggedInUserName");
					this.OnLoggedInUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalInfo", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AdditionalInfo
		{
			get
			{
				return this._AdditionalInfo;
			}
			set
			{
				if ((this._AdditionalInfo != value))
				{
					this.OnAdditionalInfoChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInfo = value;
					this.SendPropertyChanged("AdditionalInfo");
					this.OnAdditionalInfoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _Name;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<RolePermission> _RolePermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_RolePermissions", ThisKey="RoleID", OtherKey="RoleId")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolePermissions")]
	public partial class RolePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PermissionName;
		
		private int _RoleId;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionNameChanging(string value);
    partial void OnPermissionNameChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public RolePermission()
		{
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionName", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PermissionName
		{
			get
			{
				return this._PermissionName;
			}
			set
			{
				if ((this._PermissionName != value))
				{
					this.OnPermissionNameChanging(value);
					this.SendPropertyChanging();
					this._PermissionName = value;
					this.SendPropertyChanged("PermissionName");
					this.OnPermissionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_Role", ThisKey="RoleId", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._RoleId = value.RoleID;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PasswordResetRequests")]
	public partial class PasswordResetRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PasswordResetRequestId;
		
		private System.Nullable<int> _UserID;
		
		private string _ResetKey;
		
		private System.DateTime _RequestDate;
		
		private string _ClientIP;
		
		private bool _KeyUsed;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPasswordResetRequestIdChanging(int value);
    partial void OnPasswordResetRequestIdChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnResetKeyChanging(string value);
    partial void OnResetKeyChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnClientIPChanging(string value);
    partial void OnClientIPChanged();
    partial void OnKeyUsedChanging(bool value);
    partial void OnKeyUsedChanged();
    #endregion
		
		public PasswordResetRequest()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordResetRequestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PasswordResetRequestId
		{
			get
			{
				return this._PasswordResetRequestId;
			}
			set
			{
				if ((this._PasswordResetRequestId != value))
				{
					this.OnPasswordResetRequestIdChanging(value);
					this.SendPropertyChanging();
					this._PasswordResetRequestId = value;
					this.SendPropertyChanged("PasswordResetRequestId");
					this.OnPasswordResetRequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResetKey", DbType="Char(8)")]
		public string ResetKey
		{
			get
			{
				return this._ResetKey;
			}
			set
			{
				if ((this._ResetKey != value))
				{
					this.OnResetKeyChanging(value);
					this.SendPropertyChanging();
					this._ResetKey = value;
					this.SendPropertyChanged("ResetKey");
					this.OnResetKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientIP", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ClientIP
		{
			get
			{
				return this._ClientIP;
			}
			set
			{
				if ((this._ClientIP != value))
				{
					this.OnClientIPChanging(value);
					this.SendPropertyChanging();
					this._ClientIP = value;
					this.SendPropertyChanged("ClientIP");
					this.OnClientIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyUsed", DbType="Bit NOT NULL")]
		public bool KeyUsed
		{
			get
			{
				return this._KeyUsed;
			}
			set
			{
				if ((this._KeyUsed != value))
				{
					this.OnKeyUsedChanging(value);
					this.SendPropertyChanging();
					this._KeyUsed = value;
					this.SendPropertyChanged("KeyUsed");
					this.OnKeyUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PasswordResetRequest", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PasswordResetRequests.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PasswordResetRequests.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private bool _Active;
		
		private System.DateTime _CreatedTS;
		
		private string _Email;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<PasswordResetRequest> _PasswordResetRequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedTSChanging(System.DateTime value);
    partial void OnCreatedTSChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public User()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._PasswordResetRequests = new EntitySet<PasswordResetRequest>(new Action<PasswordResetRequest>(this.attach_PasswordResetRequests), new Action<PasswordResetRequest>(this.detach_PasswordResetRequests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedTS", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedTS
		{
			get
			{
				return this._CreatedTS;
			}
			set
			{
				if ((this._CreatedTS != value))
				{
					this.OnCreatedTSChanging(value);
					this.SendPropertyChanging();
					this._CreatedTS = value;
					this.SendPropertyChanged("CreatedTS");
					this.OnCreatedTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PasswordResetRequest", Storage="_PasswordResetRequests", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<PasswordResetRequest> PasswordResetRequests
		{
			get
			{
				return this._PasswordResetRequests;
			}
			set
			{
				this._PasswordResetRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PasswordResetRequests(PasswordResetRequest entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PasswordResetRequests(PasswordResetRequest entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
